#loc = loc(unknown)
#loc1 = loc("Const:")
#loc2 = loc("I4")
#loc3 = loc("Placeholder:")
#loc4 = loc("X")
#loc5 = loc("Add:")
#loc6 = loc("I5")
#loc7 = loc("Sigmoid:")
#loc8 = loc("Sigmoid")
module attributes {tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 134 : i32}} {
  func.func @main() -> tensor<3x4xf32> attributes {tf.entry_function = {control_outputs = "", inputs = "", outputs = "Sigmoid:0"}} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {_symbolic_output_shapes = [#tf_type.shape<3x4>], device = "", value = dense<[[1.89715683, 2.28864574, 2.5301075, 1.44036615], [2.38174152, 2.3923502, 3.08583593, 2.47987938], [1.45948064, 2.13895845, 2.05759335, 3.06765294]]> : tensor<3x4xf32>} : () -> tensor<3x4xf32> loc(#loc9)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Placeholder"() {_symbolic_output_shapes = [#tf_type.shape<3x4>], device = "", shape = #tf_type.shape<?x4>} : () -> tensor<?x4xf32> loc(#loc10)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Add"(%outputs, %outputs_0) {_symbolic_output_shapes = [#tf_type.shape<3x4>], device = ""} : (tensor<3x4xf32>, tensor<?x4xf32>) -> tensor<3x4xf32> loc(#loc11)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.Sigmoid"(%outputs_2) {_symbolic_output_shapes = [#tf_type.shape<3x4>], device = ""} : (tensor<3x4xf32>) -> tensor<3x4xf32> loc(#loc12)
      tf_executor.fetch %outputs_4 : tensor<3x4xf32> loc(#loc)
    } loc(#loc)
    return %0 : tensor<3x4xf32> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc9 = loc(fused["Const:", "I4"])
#loc10 = loc(fused["Placeholder:", "X"])
#loc11 = loc(fused["Add:", "I5"])
#loc12 = loc(fused["Sigmoid:", "Sigmoid"])
