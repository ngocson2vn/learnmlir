# load("//third_party:workspace.bzl", llvm = "repo")

# # Load the raw llvm-project.  llvm does not have build rules set up by default,
# # but provides a script for setting up build rules via overlays.
# llvm("llvm-raw")

# load("//third_party:setup.bzl", "llvm_setup")
# llvm_setup(name = "llvm-project")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "com_github_bazelbuild_buildtools",
    sha256 = "ae34c344514e08c23e90da0e2d6cb700fcd28e80c02e23e4d5715dddcb42f7b3",
    strip_prefix = "buildtools-4.2.2",
    urls = [
        "https://github.com/bazelbuild/buildtools/archive/refs/tags/4.2.2.tar.gz",
    ],
)

load("//bazel/torch_mlir:repo.bzl", "blade_http_archive") # type: ignore

blade_http_archive( # type: ignore
  name = "mlir-hlo",
  sha256 = "ba30ee3f189c9f993cb2de823fdb6ddb41dd2c9145f0b53a958ad4b56e6cb3ee",
  strip_prefix = "mlir-hlo-ac26bdba7a5edfe6060ba5be528b9d20c987297d",
  urls = [
    "https://github.com/tensorflow/mlir-hlo/archive/ac26bdba7a5edfe6060ba5be528b9d20c987297d.zip",
  ],
  patch_file = [
    "//bazel/torch_mlir:disable-simplify-dynamic-gather-to-gather.patch",
    "//bazel/torch_mlir:absl-build-path.patch",
  ]
)

new_local_repository(
    name = "sony-torch-mlir",
    build_file = "./bazel/torch_mlir/BUILD",
    path = "third_party/torch-mlir"
)

load("@sony-torch-mlir//utils/bazel:configure.bzl", "torch_mlir_configure")

torch_mlir_configure(
  name = "torch-mlir"
)

# tensorflow
local_repository(
    name = "org_tensorflow",
    path = "./third_party/tensorflow",
)

load("@org_tensorflow//tensorflow:workspace3.bzl", "tf_workspace3")
tf_workspace3()

load("@org_tensorflow//tensorflow:workspace2.bzl", "tf_workspace2")
tf_workspace2()

load("@org_tensorflow//tensorflow:workspace1.bzl", "tf_workspace1")
tf_workspace1()

load("@org_tensorflow//tensorflow:workspace0.bzl", "tf_workspace0")
tf_workspace0()
